name: macOS ISO Builder with OpenCore

on:
  workflow_dispatch:

jobs:
  build_iso:
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - macos_name: "high-sierra"
            macos_version: "10.13"
            macos_build: "17G66"
            catalog: "publicrelease"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          brew install wget

      - name: Clone gibMacOS
        run: |
          git clone https://github.com/corpnewt/gibMacOS.git gibMacOS
          chmod +x gibMacOS/gibMacOS.command

      - name: Download macOS installer package
        working-directory: gibMacOS
        run: |
          python3 gibMacOS.py --catalog ${{ matrix.catalog }} \
                             --version ${{ matrix.macos_version }} \
                             -b ${{ matrix.macos_build }}

      - name: Determine download directory
        run: |
          DIR=$(find "${GITHUB_WORKSPACE}/gibMacOS/macOS Downloads" -type d -name "*${{ matrix.macos_build }}*" | head -n1)
          echo "DOWNLOAD_DIR=$DIR" >> $GITHUB_ENV

      - name: Create sparse image
        run: |
          hdiutil create -size 16g -layout GPTSPUD -fs HFS+J -type SPARSE -volname "Install_${{ matrix.macos_name }}" -o temp_install

      - name: Attach sparse image
        run: |
          ATTACH_OUTPUT=$(hdiutil attach temp_install.sparseimage -nobrowse -noverify -noautoopen)
          MOUNT_POINT=$(echo "$ATTACH_OUTPUT" | tail -1 | awk '{print $3}')
          echo "MOUNT_POINT=$MOUNT_POINT" >> $GITHUB_ENV

      - name: Run createinstallmedia
        run: |
          echo "Using DOWNLOAD_DIR: $DOWNLOAD_DIR"
          INSTALLER_APP=$(find "$DOWNLOAD_DIR" -maxdepth 2 -type d -name "Install*.app" | head -n1)
          if [ -z "$INSTALLER_APP" ]; then
            echo "Error: Installer app not found in $DOWNLOAD_DIR"
            exit 1
          fi
          echo "Found Installer: $INSTALLER_APP"
          sudo "$INSTALLER_APP/Contents/Resources/createinstallmedia" --volume "$MOUNT_POINT" --nointeraction

      - name: Unmount sparse image
        run: |
          diskutil unmount "$MOUNT_POINT" || true
          DEVICE=$(echo "$ATTACH_OUTPUT" | head -1 | awk '{print $1}')
          hdiutil detach "$DEVICE" || true

      - name: Convert to ISO
        run: |
          mkdir -p output
          hdiutil convert temp_install.sparseimage -format UDTO -o output/${{ matrix.macos_name }}_full
          mv output/${{ matrix.macos_name }}_full.cdr output/${{ matrix.macos_name }}_full.iso

      - name: Inject OpenCore EFI
        run: |
          # Mount ISO to inject EFI
          MOUNT_ISO=$(hdiutil attach output/${{ matrix.macos_name }}_full.iso -noverify -nobrowse | grep "/Volumes" | awk '{print $3}')
          echo "Mounting ISO at: $MOUNT_ISO"
          sudo cp -R EFI "$MOUNT_ISO/EFI Boot/"
          diskutil unmount "$MOUNT_ISO/EFI Boot" || true
          hdiutil detach "$MOUNT_ISO" || true

      - name: List output
        run: |
          ls -lah output/

      - name: Upload via SCP
        run: |
          ISO=output/${{ matrix.macos_name }}_full.iso
          sshpass -p "${{ secrets.PASSWORD }}" scp -o StrictHostKeyChecking=no "$ISO" root@${{ secrets.IP }}:/root/macOS-images/${{ matrix.macos_name }}/
          sshpass -p "${{ secrets.PASSWORD }}" ssh -o StrictHostKeyChecking=no root@${{ secrets.IP }} "ls -lah /root/macOS-images/${{ matrix.macos_name }}/"
