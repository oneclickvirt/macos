name: MacOS ISO Builder For OpenCore

on:
  workflow_dispatch:

jobs:
  build_iso:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        include:
          - macos_version: "20G1427"
            macos_name: "big-sur"
            macos_version_number: "11.7"
            catalog: "publicrelease"
          - macos_version: "21H1123"
            macos_name: "monterey"
            macos_version_number: "12"
            catalog: "publicrelease"
          - macos_version: "22H313"
            macos_name: "ventura"
            macos_version_number: "13"
            catalog: "publicrelease"
          - macos_version: "23H311"
            macos_name: "sonoma"
            macos_version_number: "14"
            catalog: "publicrelease"
          - macos_version: "24C101"
            macos_name: "sequoia"
            macos_version_number: "15"
            catalog: "publicrelease"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          brew install wget sshpass p7zip cpio

      - name: Download macOS Installer
        run: |
          echo "Downloading macOS installer ${{ matrix.macos_name }} ${{ matrix.macos_version_number }}"
          sudo softwareupdate --fetch-full-installer --full-installer-version ${{ matrix.macos_version_number }} || true

          # Fallback via mist if softwareupdate fails
          if [ ! -d "/Applications/Install macOS*.app" ]; then
            git clone https://github.com/ninxsoft/mist.git
            cd mist && swift build -c release
            mkdir -p ~/Downloads/macOS
            ./.build/release/mist download \
              --include-betas \
              --output-directory ~/Downloads/macOS \
              --catalog ${{ matrix.catalog }} \
              --version ${{ matrix.macos_version }} \
              --format pkg
            PKG=$(find ~/Downloads/macOS -name "*.pkg" | head -n1)
            sudo installer -pkg "$PKG" -target /
          fi

          # Locate the installer app
          INSTALLER_APP=$(find /Applications -maxdepth 1 -name "Install macOS*.app" \
            | grep -i "${{ matrix.macos_name }}" | head -n1)
          echo "INSTALLER_APP=$INSTALLER_APP" >> $GITHUB_ENV
          ls -la "$INSTALLER_APP"

      - name: Create temporary installer volume
        run: |
          hdiutil create -size 16384m \
            -layout SPUD \
            -fs HFS+J \
            -volname "Install macOS ${{ matrix.macos_name | capitalize }}" \
            /tmp/Install_${{ matrix.macos_name }}.dmg

      - name: Attach installer volume
        run: |
          hdiutil attach /tmp/Install_${{ matrix.macos_name }}.dmg \
            -nobrowse -noverify -mountpoint /Volumes/InstallBuild

      - name: Run createinstallmedia
        run: |
          sudo "/Applications/Install macOS ${{ matrix.macos_name | capitalize }}.app/Contents/Resources/createinstallmedia" \
            --volume /Volumes/InstallBuild --nointeraction

      - name: Eject installer volume
        run: |
          hdiutil eject /Volumes/InstallBuild

      - name: Convert DMG to ISO
        run: |
          mkdir -p output
          # Produce a raw UDTO (CD‑master) image…
          hdiutil convert /tmp/Install_${{ matrix.macos_name }}.dmg \
            -format UDTO -o output/${{ matrix.macos_name }}
          # …then rename to .iso
          mv output/${{ matrix.macos_name }}.cdr output/${{ matrix.macos_name }}.iso

      - name: (Optional) Make hybrid ISO
        run: |
          hdiutil makehybrid \
            -iso -joliet \
            -o output/${{ matrix.macos_name }}-hybrid.iso \
            output/${{ matrix.macos_name }}.iso
      - name: Compress ISO with 7z
        run: |
          ISO=output/${{ matrix.macos_name }}.iso
          7z a -t7z -m0=lzma2 -mx=9 -mmt=on -ms=on -md=256m "$ISO.7z" "$ISO"

      - name: Verify compressed archive
        run: |
          7z t output/${{ matrix.macos_name }}.iso.7z

      - name: Upload via SCP
        run: |
          sshpass -p "${{ secrets.PASSWORD }}" ssh -o StrictHostKeyChecking=no \
            root@${{ secrets.IP }} "mkdir -p /root/macos"
          sshpass -p "${{ secrets.PASSWORD }}" scp -o StrictHostKeyChecking=no \
            output/${{ matrix.macos_name }}.iso.7z \
            root@${{ secrets.IP }}:/root/macos/
          sshpass -p "${{ secrets.PASSWORD }}" ssh -o StrictHostKeyChecking=no \
            root@${{ secrets.IP }} "ls -lah /root/macos/"
