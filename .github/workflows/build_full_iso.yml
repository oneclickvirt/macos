name: MacOS ISO Builder For OpenCore

on:
  workflow_dispatch:

jobs:
  build_iso:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        include:
          # - macos_version: "17G66"
          #   macos_name: "high-sierra"
          #   macos_version_number: "10.13"
          #   catalog: "publicrelease"
          # - macos_version: "18F2059"
          #   macos_name: "mojave"
          #   macos_version_number: "10.14"
          #   catalog: "publicrelease"
          # - macos_version: "19D2064"
          #   macos_name: "catalina"
          #   macos_version_number: "10.15"
          #   catalog: "publicrelease"
          - macos_version: "20G1427"
            macos_name: "big-sur"
            macos_version_number: "11.7"
            catalog: "publicrelease"
          - macos_version: "21H1123"
            macos_name: "monterey"
            macos_version_number: "12"
            catalog: "publicrelease"
          - macos_version: "22H313"
            macos_name: "ventura"
            macos_version_number: "13"
            catalog: "publicrelease"
          - macos_version: "23H311"
            macos_name: "sonoma"
            macos_version_number: "14"
            catalog: "publicrelease"
          - macos_version: "24C101"
            macos_name: "sequoia"
            macos_version_number: "15"
            catalog: "publicrelease"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          brew install wget sshpass

      - name: Clone gibMacOS
        run: |
          git clone https://github.com/corpnewt/gibMacOS.git gibMacOS
          chmod +x gibMacOS/gibMacOS.command

      - name: Download macOS components
        working-directory: gibMacOS
        run: |
          python3 gibMacOS.py --catalog "${{ matrix.catalog }}" \
                             --version "${{ matrix.macos_version_number }}" \
                             -b "${{ matrix.macos_version }}"

      - name: Determine download directory
        id: find_dir
        run: |
          DIR=$(find "${GITHUB_WORKSPACE}/gibMacOS/macOS Downloads" -type d -name "*${{ matrix.macos_version }}*" | head -n1)
          if [ -z "$DIR" ]; then echo "Error: download dir not found"; exit 1; fi
          echo "DOWNLOAD_DIR=$DIR" >> $GITHUB_ENV

      - name: Prepare installer app
        run: |
          MAJOR=$(echo "${{ matrix.macos_version_number }}" | cut -d. -f1)
          if [ "$MAJOR" -lt 11 ]; then
            # macOS 10.x：已自带 Install*.app
            APP=$(find "$DOWNLOAD_DIR" -maxdepth 2 -type d -name "Install*.app" | head -n1)
            if [ -z "$APP" ]; then
              echo "Error: installer.app not found in $DOWNLOAD_DIR"
              exit 1
            fi
            INSTALLER_APP="$APP"
          else
            APP=$(find "$DOWNLOAD_DIR" -type d -name "Install*.app" | head -n1)
            if [ -z "$APP" ]; then
              PKG=$(find "$DOWNLOAD_DIR" -name "InstallAssistant.pkg" | head -n1)
              if [ -n "$PKG" ]; then
                echo "找到安装包: $PKG，正在安装..."
                mkdir -p installer_app
                sudo pkgutil --expand "$PKG" pkg_expanded
                if [ -d "pkg_expanded" ]; then
                  # 遍历所有可能的 Payload 文件
                  for payload in $(find pkg_expanded -name "Payload"); do
                    echo "处理 Payload: $payload"
                    temp_dir=$(mktemp -d)
                    (cd "$temp_dir" && cat "$payload" | gunzip -dc | cpio -i 2>/dev/null || true)
                    temp_app=$(find "$temp_dir" -type d -name "Install*.app" | head -n1)
                    if [ -n "$temp_app" ]; then
                      cp -R "$temp_app" installer_app/
                      rm -rf "$temp_dir"
                      break
                    fi
                    rm -rf "$temp_dir"
                  done
                fi
                APP=$(find installer_app -type d -name "Install*.app" | head -n1)
                if [ -z "$APP" ]; then
                  echo "尝试使用原始安装包创建安装应用..."
                  mkdir -p "installer_app/Install macOS ${{ matrix.macos_name }}.app/Contents/SharedSupport"
                  cp "$PKG" "installer_app/Install macOS ${{ matrix.macos_name }}.app/Contents/SharedSupport/SharedSupport.dmg"
                  echo '<?xml version="1.0" encoding="UTF-8"?>' > "installer_app/Install macOS ${{ matrix.macos_name }}.app/Contents/Info.plist"
                  echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> "installer_app/Install macOS ${{ matrix.macos_name }}.app/Contents/Info.plist"
                  echo '<plist version="1.0">' >> "installer_app/Install macOS ${{ matrix.macos_name }}.app/Contents/Info.plist"
                  echo '<dict>' >> "installer_app/Install macOS ${{ matrix.macos_name }}.app/Contents/Info.plist"
                  echo '    <key>CFBundleIdentifier</key>' >> "installer_app/Install macOS ${{ matrix.macos_name }}.app/Contents/Info.plist"
                  echo "    <string>com.apple.InstallAssistant.${{ matrix.macos_name }}</string>" >> "installer_app/Install macOS ${{ matrix.macos_name }}.app/Contents/Info.plist"
                  echo '    <key>CFBundleName</key>' >> "installer_app/Install macOS ${{ matrix.macos_name }}.app/Contents/Info.plist"
                  echo "    <string>Install macOS ${{ matrix.macos_name }}</string>" >> "installer_app/Install macOS ${{ matrix.macos_name }}.app/Contents/Info.plist"
                  echo '    <key>CFBundleExecutable</key>' >> "installer_app/Install macOS ${{ matrix.macos_name }}.app/Contents/Info.plist"
                  echo '    <string>InstallAssistant</string>' >> "installer_app/Install macOS ${{ matrix.macos_name }}.app/Contents/Info.plist"
                  echo '</dict>' >> "installer_app/Install macOS ${{ matrix.macos_name }}.app/Contents/Info.plist"
                  echo '</plist>' >> "installer_app/Install macOS ${{ matrix.macos_name }}.app/Contents/Info.plist"
                  if [ -f "$DOWNLOAD_DIR/InstallInfo.plist" ]; then
                    cp "$DOWNLOAD_DIR/InstallInfo.plist" "installer_app/Install macOS ${{ matrix.macos_name }}.app/Contents/SharedSupport/"
                  fi
                  for file in "$DOWNLOAD_DIR"/*; do
                    base_name=$(basename "$file")
                    if [[ "$base_name" != "InstallAssistant.pkg" && "$base_name" != "."* ]]; then
                      cp -R "$file" "installer_app/Install macOS ${{ matrix.macos_name }}.app/Contents/SharedSupport/"
                    fi
                  done
                  APP="installer_app/Install macOS ${{ matrix.macos_name }}.app"
                fi
              else
                echo "Error: 无法找到 InstallAssistant.pkg"
                ls -la "$DOWNLOAD_DIR"
                exit 1
              fi
            fi
            INSTALLER_APP="$PWD/$APP"
          fi
          if [ ! -d "$INSTALLER_APP" ]; then
            echo "Error: 安装应用程序路径无效: $INSTALLER_APP"
            exit 1
          fi
          echo "找到安装应用程序: $INSTALLER_APP"
          ls -la "$INSTALLER_APP"
          echo "INSTALLER_APP=$INSTALLER_APP" >> $GITHUB_ENV

      - name: Create sparse image with dynamic size
        run: |
          DOWNLOAD_SIZE=$(du -sk "$DOWNLOAD_DIR" | awk '{print $1}')
          DOWNLOAD_SIZE_GB=$(( (DOWNLOAD_SIZE + 1048576) / 1048576 ))
          IMAGE_SIZE="${DOWNLOAD_SIZE_GB}g"
          echo "Creating sparse image with size: $IMAGE_SIZE"
          hdiutil create -size $IMAGE_SIZE -layout GPTSPUD -fs HFS+J -type SPARSE \
            -volname "Install_${{ matrix.macos_name }}" \
            -o temp_install.sparseimage

      - name: Attach sparse image
        id: attach
        run: |
          OUTPUT=$(hdiutil attach temp_install.sparseimage -nobrowse -noverify -noautoopen)
          EFI_LINE=$(echo "$OUTPUT" | grep -i "EFI ")
          INSTALL_LINE=$(echo "$OUTPUT" | grep -i "Install_${{ matrix.macos_name }}")
          EFI_DEV=$(echo "$EFI_LINE" | awk '{print $1}')
          EFI_MNT=$(echo "$EFI_LINE" | awk '{print $3}')
          INST_DEV=$(echo "$INSTALL_LINE" | awk '{print $1}')
          INST_MNT=$(echo "$INSTALL_LINE" | awk '{print $3}')
          echo "EFI_DEV=$EFI_DEV" >> $GITHUB_ENV
          echo "EFI_MNT=$EFI_MNT" >> $GITHUB_ENV
          echo "INST_DEV=$INST_DEV" >> $GITHUB_ENV
          echo "INST_MNT=$INST_MNT" >> $GITHUB_ENV

      - name: Run createinstallmedia
        run: |
          echo "Using installer at $INSTALLER_APP"
          sudo "$INSTALLER_APP/Contents/Resources/createinstallmedia" \
            --volume "$INST_MNT" --nointeraction

      - name: Inject OpenCore EFI
        run: |
          echo "Mounting EFI partition $EFI_DEV"
          diskutil mount "$EFI_DEV"
          EFI_MNT_POINT=$(mount | grep "$EFI_DEV" | awk '{print $3}')
          echo "Copying OpenCore EFI to $EFI_MNT_POINT"
          sudo cp -R EFI/* "$EFI_MNT_POINT/"
          diskutil unmount "$EFI_MNT_POINT" || true

      - name: Detach sparse image
        run: |
          hdiutil detach "$EFI_DEV" || true
          hdiutil detach "$INST_DEV" || true

      - name: Create hybrid ISO
        run: |
          mkdir -p output
          sleep 30
          hdiutil convert temp_install.sparseimage -format UDTO -o output/${{ matrix.macos_name }}.cdr
          sleep 20
          mv output/${{ matrix.macos_name }}.cdr output/${{ matrix.macos_name }}.iso

      - name: List output
        run: |
          ls -lah output/

      - name: Install 7-Zip
        run: |
          brew install p7zip

      - name: Compress ISO with 7z (max compression)
        run: |
          ISO_PATH=output/${{ matrix.macos_name }}.iso
          COMPRESSED_PATH=${ISO_PATH}.7z
          echo "Compressing $ISO_PATH to $COMPRESSED_PATH"
          7z a -t7z -m0=lzma2 -mx=9 -mmt=on -ms=on -md=256m "$COMPRESSED_PATH" "$ISO_PATH"
          echo "Compression complete."
          ls -lh "$COMPRESSED_PATH"

      - name: Verify ISO integrity after compression
        run: |
          7z t output/${{ matrix.macos_name }}.iso.7z

      - name: Upload via SCP to /root/macos
        run: |
          ISO_7Z=output/${{ matrix.macos_name }}.iso.7z
          sshpass -p "${{ secrets.PASSWORD }}" ssh -o StrictHostKeyChecking=no root@${{ secrets.IP }} "mkdir -p /root/macos"
          sshpass -p "${{ secrets.PASSWORD }}" scp -o StrictHostKeyChecking=no "$ISO_7Z" root@${{ secrets.IP }}:/root/macos/
          sshpass -p "${{ secrets.PASSWORD }}" ssh -o StrictHostKeyChecking=no root@${{ secrets.IP }} "ls -lah /root/macos/"
