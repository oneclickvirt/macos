name: MacOS ISO Builder For OpenCore

on:
  workflow_dispatch:

jobs:
  build_iso:
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - macos_name: "high-sierra"
            macos_version: "10.13"
            macos_build: "17G66"
            catalog: "publicrelease"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          brew install wget sshpass

      - name: Clone gibMacOS
        run: |
          git clone https://github.com/corpnewt/gibMacOS.git gibMacOS
          chmod +x gibMacOS/gibMacOS.command

      - name: Download macOS components
        working-directory: gibMacOS
        run: |
          python3 gibMacOS.py --catalog "${{ matrix.catalog }}" \
                             --version "${{ matrix.macos_version }}" \
                             -b "${{ matrix.macos_build }}"

      - name: Determine download directory
        id: find_dir
        run: |
          DIR=$(find "${GITHUB_WORKSPACE}/gibMacOS/macOS Downloads" -type d -name "*${{ matrix.macos_build }}*" | head -n1)
          if [ -z "$DIR" ]; then echo "Error: download dir not found"; exit 1; fi
          echo "DOWNLOAD_DIR=$DIR" >> $GITHUB_ENV

      - name: Prepare installer app
        run: |
          if [[ "${{ matrix.macos_version }}" == 10.* ]]; then
            wget https://raw.githubusercontent.com/oneclickvirt/macos/main/BuildmacOSInstallApp.py -O BuildmacOSInstallApp.py
            chmod +x BuildmacOSInstallApp.py
            python3 BuildmacOSInstallApp.py "$DOWNLOAD_DIR" installer_app
            APP=$(find installer_app -maxdepth 2 -type d -name "Install*.app" | head -n1)
            if [ -z "$APP" ]; then echo "Error: built installer.app not found"; exit 1; fi
            INSTALLER_APP="$PWD/$APP"
          else
            APP=$(find "$DOWNLOAD_DIR" -maxdepth 2 -type d -name "Install*.app" | head -n1)
            if [ -z "$APP" ]; then echo "Error: installer.app not found"; exit 1; fi
            INSTALLER_APP="$APP"
          fi
          echo "INSTALLER_APP=$INSTALLER_APP" >> $GITHUB_ENV
          
      - name: Create sparse image with dynamic size
        run: |
          DOWNLOAD_SIZE=$(du -sk "$DOWNLOAD_DIR" | awk '{print $1}')
          DOWNLOAD_SIZE_GB=$(( (DOWNLOAD_SIZE + 1048576) / 1048576 ))
          IMAGE_SIZE=$((DOWNLOAD_SIZE_GB + 1))g
          echo "Creating sparse image with size: $IMAGE_SIZE"
          hdiutil create -size $IMAGE_SIZE -layout GPTSPUD -fs HFS+J -type SPARSE \
            -volname "Install_${{ matrix.macos_name }}" \
            -o temp_install.sparseimage
              
      - name: Attach sparse image
        id: attach
        run: |
          OUTPUT=$(hdiutil attach temp_install.sparseimage -nobrowse -noverify -noautoopen)
          EFI_LINE=$(echo "$OUTPUT" | grep -i "EFI ")
          INSTALL_LINE=$(echo "$OUTPUT" | grep -i "Install_${{ matrix.macos_name }}")
          EFI_DEV=$(echo "$EFI_LINE" | awk '{print $1}')
          EFI_MNT=$(echo "$EFI_LINE" | awk '{print $3}')
          INST_DEV=$(echo "$INSTALL_LINE" | awk '{print $1}')
          INST_MNT=$(echo "$INSTALL_LINE" | awk '{print $3}')
          echo "EFI_DEV=$EFI_DEV" >> $GITHUB_ENV
          echo "EFI_MNT=$EFI_MNT" >> $GITHUB_ENV
          echo "INST_DEV=$INST_DEV" >> $GITHUB_ENV
          echo "INST_MNT=$INST_MNT" >> $GITHUB_ENV

      - name: Run createinstallmedia
        run: |
          echo "Using installer at $INSTALLER_APP"
          sudo "$INSTALLER_APP/Contents/Resources/createinstallmedia" \
            --volume "$INST_MNT" --nointeraction

      - name: Inject OpenCore EFI
        run: |
          echo "Mounting EFI partition $EFI_DEV"
          diskutil mount "$EFI_DEV"
          EFI_MNT_POINT=$(mount | grep "$EFI_DEV" | awk '{print $3}')
          echo "Copying OpenCore EFI to $EFI_MNT_POINT"
          sudo cp -R EFI/* "$EFI_MNT_POINT/"
          diskutil unmount "$EFI_MNT_POINT" || true

      - name: Detach sparse image
        run: |
          hdiutil detach "$EFI_DEV" || true
          hdiutil detach "$INST_DEV" || true

      - name: Create hybrid ISO
        run: |
          mkdir -p output
          sleep 30
          hdiutil convert temp_install.sparseimage -format UDTO -o output/${{ matrix.macos_name }}.cdr
          sleep 20
          mv output/${{ matrix.macos_name }}.cdr output/${{ matrix.macos_name }}.iso

      - name: List output
        run: |
          ls -lah output/

      - name: Install 7-Zip
        run: |
          brew install p7zip

      - name: Compress ISO with 7z (max compression)
        run: |
          ISO_PATH=output/${{ matrix.macos_name }}.iso
          COMPRESSED_PATH=${ISO_PATH}.7z
          echo "Compressing $ISO_PATH to $COMPRESSED_PATH"
          7z a -t7z -m0=lzma2 -mx=9 -mmt=on -ms=on -md=256m "$COMPRESSED_PATH" "$ISO_PATH"
          echo "Compression complete."
          ls -lh "$COMPRESSED_PATH"

      - name: Verify ISO integrity after compression
        run: |
          7z t output/${{ matrix.macos_name }}.iso.7z

      - name: Upload via SCP to /root/macos
        run: |
          ISO_7Z=output/${{ matrix.macos_name }}.iso.7z
          sshpass -p "${{ secrets.PASSWORD }}" ssh -o StrictHostKeyChecking=no root@${{ secrets.IP }} "mkdir -p /root/macos"
          sshpass -p "${{ secrets.PASSWORD }}" scp -o StrictHostKeyChecking=no "$ISO_7Z" root@${{ secrets.IP }}:/root/macos/
          sshpass -p "${{ secrets.PASSWORD }}" ssh -o StrictHostKeyChecking=no root@${{ secrets.IP }} "ls -lah /root/macos/"
