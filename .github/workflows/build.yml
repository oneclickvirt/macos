name: macOS Image Builder

on:
  workflow_dispatch:
  # schedule:
  #   - cron: '0 0 1 * *'  # Run monthly on the 1st

jobs:
  build:
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - macos_version: "17G66"
            macos_name: "high-sierra"
            maxos_version: "10.13"
            catalog: "publicrelease"
          # - macos_version: "18F2059"
          #   macos_name: "mojave"
          #   maxos_version: "10.14"
          #   catalog: "publicrelease"
          # - macos_version: "19D2064"
          #   macos_name: "catalina"
          #   maxos_version: "10.15"
          #   catalog: "publicrelease"
          # - macos_version: "20G1427"
          #   macos_name: "big-sur"
          #   maxos_version: "11.7"
          #   catalog: "publicrelease"
          # - macos_version: "21H1123"
          #   macos_name: "monterey"
          #   maxos_version: "12.6"
          #   catalog: "publicrelease"
          # - macos_version: "22H313"
          #   macos_name: "ventura"
          #   maxos_version: "13"
          #   catalog: "publicrelease"
          # - macos_version: "23H311"
          #   macos_name: "sonoma"
          #   maxos_version: "14"
          #   catalog: "publicrelease"
          # - macos_version: "24C101"
          #   macos_name: "sequoia"
          #   maxos_version: "15"
          #   catalog: "publicrelease"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install coreutils
        run: brew install coreutils

      - name: Clone and Setup gibMacOS
        run: |
          git clone https://github.com/corpnewt/gibMacOS.git
          cd gibMacOS
          python3 -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip pyyaml requests
          chmod +x gibMacOS.command
          export PATH="${PWD}/.venv/bin:${PATH}"

      - name: Build Full macOS DMG with gibMacOS
        working-directory: ${{ github.workspace }}/gibMacOS
        run: |
          source .venv/bin/activate
          ./gibMacOS.command --no-interactive \
                            --catalog ${{ matrix.catalog }} \
                            --maxos ${{ matrix.maxos_version }} \
                            --version ${{ matrix.maxos_version }} \
                            --dmg \
                            -b ${{ matrix.macos_version }} \
                            -o "${{ github.workspace }}/output"
      - name: List Output
        run: |
          ls -lh ${{ github.workspace }}/output
    
              
      - name: Create Release Notes and Push to Repository
        working-directory: ${{ github.workspace }}
        run: |
          MACOS_NAME="${{ matrix.macos_name }}"
          MACOS_VERSION="${{ matrix.macos_version }}"
          if [ ! -f "$GITHUB_WORKSPACE/output/${MACOS_NAME}_full.dmg" ]; then
            echo "Warning: Output file not found!"
            exit 1
          fi
          echo "# macOS Installation Image - $MACOS_NAME ($MACOS_VERSION)" > "$GITHUB_WORKSPACE/output/release_notes.txt"
          echo "" >> "$GITHUB_WORKSPACE/output/release_notes.txt"
          echo "This is an automatically built complete macOS installation image." >> "$GITHUB_WORKSPACE/output/release_notes.txt"
          echo "" >> "$GITHUB_WORKSPACE/output/release_notes.txt"
          echo "## Usage" >> "$GITHUB_WORKSPACE/output/release_notes.txt"
          echo "" >> "$GITHUB_WORKSPACE/output/release_notes.txt"
          echo "1. Download the complete DMG file" >> "$GITHUB_WORKSPACE/output/release_notes.txt"
          echo "2. Use Disk Utility or other tools to write the DMG to a USB drive" >> "$GITHUB_WORKSPACE/output/release_notes.txt"
          echo "" >> "$GITHUB_WORKSPACE/output/release_notes.txt"
          echo "## Build Information" >> "$GITHUB_WORKSPACE/output/release_notes.txt"
          echo "" >> "$GITHUB_WORKSPACE/output/release_notes.txt"
          echo "- Build Date: $(date '+%Y-%m-%d %H:%M:%S')" >> "$GITHUB_WORKSPACE/output/release_notes.txt"
          echo "- GitHub Action Run: $GITHUB_RUN_ID" >> "$GITHUB_WORKSPACE/output/release_notes.txt"
          echo "- Image Name: ${MACOS_NAME}" >> "$GITHUB_WORKSPACE/output/release_notes.txt"
          echo "- macOS Version: ${MACOS_VERSION}" >> "$GITHUB_WORKSPACE/output/release_notes.txt"
          TEMP_REPO_DIR="$GITHUB_WORKSPACE/temp_repo"
          mkdir -p "$TEMP_REPO_DIR"
          cd "$TEMP_REPO_DIR"
          git init
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git remote add origin https://cnb:${{ secrets.GIT_TOKEN }}@cnb.cool/oneclickvirt/template.git
          git fetch origin
          if git ls-remote --heads origin ${{ matrix.macos_name }}-build | grep -q ${{ matrix.macos_name }}-build; then
            git checkout -b ${{ matrix.macos_name }}-build origin/${{ matrix.macos_name }}-build
          else
            git checkout --orphan ${{ matrix.macos_name }}-build
            # Clear working directory when creating new branch
            git rm -rf . || true
          fi
          mkdir -p "$TEMP_REPO_DIR/macOS-images/$MACOS_NAME"
          cp -f "$GITHUB_WORKSPACE/output/${MACOS_NAME}_full.dmg" "$TEMP_REPO_DIR/macOS-images/$MACOS_NAME/"
          cp -f "$GITHUB_WORKSPACE/output/release_notes.txt" "$TEMP_REPO_DIR/macOS-images/$MACOS_NAME/"
          git add "$TEMP_REPO_DIR/macOS-images/$MACOS_NAME/"*
          git commit -m "Add macOS $MACOS_NAME ($MACOS_VERSION) installation image"
          git push -u origin ${{ matrix.macos_name }}-build:${{ matrix.macos_name }}-build
