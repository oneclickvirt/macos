image: macos-sonoma
only_commits:
  files:
    - appveyor.yml
environment:
  matrix:
    # - MACOS_VERSION_CODE: "20G1427"
    #   MACOS_NAME: "big‑sur"
    #   MACOS_DISPLAY_NAME: "Big Sur"
    #   MACOS_VERSION_NUMBER: "11"
    #   CATALOG: "publicrelease"
    #   IMAGE_SIZE: "13270m"
    - MACOS_VERSION_CODE: "21H1123"
      MACOS_NAME: "monterey"
      MACOS_DISPLAY_NAME: "Monterey"
      MACOS_VERSION_NUMBER: "12"
      CATALOG: "publicrelease"
      IMAGE_SIZE: "14275m"
    # - MACOS_VERSION_CODE: "22H313"
    #   MACOS_NAME: "ventura"
    #   MACOS_DISPLAY_NAME: "Ventura"
    #   MACOS_VERSION_NUMBER: "13"
    #   CATALOG: "publicrelease"
    #   IMAGE_SIZE: "14275m"
    # - MACOS_VERSION_CODE: "23H311"
    #   MACOS_NAME: "sonoma"
    #   MACOS_DISPLAY_NAME: "Sonoma"
    #   MACOS_VERSION_NUMBER: "14"
    #   CATALOG: "publicrelease"
    #   IMAGE_SIZE: "15700m"
    # - MACOS_VERSION_CODE: "24C101"
    #   MACOS_NAME: "sequoia"
    #   MACOS_DISPLAY_NAME: "Sequoia"
    #   MACOS_VERSION_NUMBER: "15"
    #   CATALOG: "publicrelease"
    #   IMAGE_SIZE: "17200m"

matrix:
  fast_finish: true

build_script:
  - brew update
  - brew install sshpass
  - git clone https://github.com/corpnewt/gibMacOS.git gibMacOS
  - chmod +x gibMacOS/gibMacOS.command
  - cd gibMacOS
  - python3 gibMacOS.py --catalog "$CATALOG" --version "$MACOS_VERSION_NUMBER" -b "$MACOS_VERSION_CODE"
  - cd ..
  - |
    DOWNLOAD_DIR=$(find "$PWD/gibMacOS/macOS Downloads" -type d -name "*$MACOS_VERSION_CODE*" | head -n1)
    if [ -z "$DOWNLOAD_DIR" ]; then
      echo "Error: download dir not found"; exit 1
    fi
  - |
    PKG=$(find "$DOWNLOAD_DIR" -maxdepth 1 -name "InstallAssistant.pkg" | head -n1)
    sudo installer -pkg "$PKG" -target /Applications
    APP="/Applications/Install macOS $MACOS_DISPLAY_NAME.app"
    if [ ! -d "$APP" ]; then
      echo "Error: $APP not found"; exit 1
    fi
  - |
    echo "Creating sparse image of size $IMAGE_SIZE …"
    hdiutil create \
      -size "$IMAGE_SIZE" \
      -layout GPTSPUD \
      -fs HFS+J \
      -type SPARSE \
      -volname "Install_$MACOS_NAME" \
      -o temp_install.sparseimage
  - |
    ATTACH_OUT=$(hdiutil attach temp_install.sparseimage \
      -nobrowse -noverify -noautoopen -readwrite)
    echo "挂载信息: $ATTACH_OUT"
  - |
    ACTUAL_INSTALL_VOL=$(echo "$ATTACH_OUT" | grep "Install_$MACOS_NAME" | awk '{print $3}')
    if [ -z "$ACTUAL_INSTALL_VOL" ]; then
      echo "Error: 无法找到安装卷挂载点"; exit 1
    fi
    echo "实际挂载点: $ACTUAL_INSTALL_VOL"
    EFI_DEV=$(echo "$ATTACH_OUT" | awk '/EFI$/ {print $1}')
    EFI_MNT=$(echo "$ATTACH_OUT" | awk '/EFI$/ {print $3}')
    INST_DEV=$(echo "$ATTACH_OUT" | grep "Install_$MACOS_NAME" | awk '{print $1}')
    echo "安装设备: $INST_DEV"
  - |
    sudo "$APP/Contents/Resources/createinstallmedia" \
      --volume "$ACTUAL_INSTALL_VOL" --nointeraction --downloadassets
  - |
    diskutil mount "$EFI_DEV" || true
    if [ -d "$EFI_MNT" ]; then
      if [ -d "EFI" ]; then
        sudo cp -R EFI/* "$EFI_MNT/"
      else
        echo "警告: EFI 目录不存在，跳过 EFI 注入"
      fi
      diskutil unmount "$EFI_DEV" || true
    else
      echo "警告: EFI 分区未挂载成功，跳过 EFI 注入"
    fi
  - |
    sleep 5
    diskutil list
    echo "尝试卸载分区..."
    hdiutil detach "$INST_DEV" -force || true
    if [ ! -z "$EFI_DEV" ]; then
      hdiutil detach "$EFI_DEV" -force || true
    fi
    sleep 2
  - |
    mkdir -p output
    hdiutil convert temp_install.sparseimage \
      -format UDTO -o output/$MACOS_NAME.cdr
    mv output/$MACOS_NAME.cdr output/$MACOS_NAME.iso
  - ssh-keygen -R "$IP"
  - sshpass -p "$PASSWORD" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@"$IP" "mkdir -p /root/macos && exit"
  - sshpass -p "$PASSWORD" scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "output/$MACOS_NAME.iso" root@"$IP":/root/macos/
  - sshpass -p "$PASSWORD" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@"$IP" "ls -lah /root/macos/"
